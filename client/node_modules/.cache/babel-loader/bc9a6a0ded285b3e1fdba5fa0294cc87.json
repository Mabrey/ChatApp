{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\matth\\\\Code\\\\ChatApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\matth\\\\Code\\\\ChatApp\\\\client\\\\src\\\\App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport queryString from 'query-string';\nimport './Styles/App.css';\nimport Chatbox from './Components/Chatbox';\nimport HomeContainer from './Components/HomeContainer';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.ws = new WebSocket('ws://localhost:5000');\n\n    this.componentDidUpdate = () => {\n      console.log(this.state.messages);\n    };\n\n    this.getUserID = async () => {\n      const response = await fetch('/create_user_id');\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      console.log(body.userID);\n      return body.userID;\n    };\n\n    this.getWebsocketURL = async () => {\n      const response = await fetch('/get_websocket_url');\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n\n    this.createRoom = async () => {\n      const response = await fetch('/create_room');\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n\n    this.handleChange = event => {\n      this.setState(_objectSpread({}, this.state, {\n        outgoingMessage: event.target.value\n      }));\n    };\n\n    this.handleSubmit = () => {\n      let message = {\n        author: this.state.userID,\n        roomID: this.state.roomID,\n        message: this.state.outgoingMessage\n      };\n      this.setState(state => {\n        const messages = [...state.messages, message];\n        return _objectSpread({}, state, {\n          messages\n        });\n      });\n      let messageString = JSON.stringify(message);\n      this.ws.send(messageString);\n    };\n\n    this.checkIfLobbyIsActive = async roomID => {\n      const response = await fetch(\"/is_room_active?roomID=\".concat(roomID));\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n\n    this.createLobby = async () => {\n      console.log(this.state.userID);\n      const response = await fetch(\"/create_room?userID=\".concat(this.state.userID));\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      this.setState(_objectSpread({}, this.state, {\n        roomID: body.roomID\n      }));\n      this.enterLobby();\n      return body;\n    };\n\n    this.joinLobby = async () => {\n      if (this.checkIfLobbyIsActive(this.state.roomID)) {\n        const response = await fetch(\"/join_room?userID=\".concat(this.state.userID, \"&roomID=\").concat(this.state.roomID));\n        const body = await response.json();\n\n        if (response.status !== 200) {\n          throw Error(body.message);\n        }\n\n        console.log(body.roomJoinStatus);\n\n        if (body.roomJoinStatus === \"Success\") {\n          this.enterLobby();\n        }\n\n        return body;\n      }\n    };\n\n    this.leaveRoom = async () => {\n      if (!this.state.currentlyInLobby) return;\n      const response = await fetch(\"/leave_room?userID=\".concat(this.state.userID, \"&roomID=\").concat(this.state.roomID));\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      console.log(body.roomJoinStatus);\n\n      if (body.roomLeaveStatus === \"Success\") {\n        this.clearRoomInfo();\n      }\n\n      if (body.roomJoinStatus === \"Failed\") {\n        console.log(body.roomJoinStatus);\n      }\n\n      return body;\n    };\n\n    this.clearRoomInfo = () => {\n      this.setState(_objectSpread({}, this.state, {\n        currentlyInLobby: false,\n        roomID: '',\n        messages: []\n      }));\n    };\n\n    this.changeLobbyState = () => {\n      this.setState(_objectSpread({}, this.state, {\n        currentlyInLobby: !this.state.currentlyInLobby\n      }));\n    };\n\n    this.enterLobby = () => {\n      this.setState(_objectSpread({}, this.state, {\n        currentlyInLobby: true\n      }));\n    };\n\n    this.handleRoomJoinText = event => {\n      this.setState(_objectSpread({}, this.state, {\n        roomID: event.target.value\n      }));\n    };\n\n    this.state = {\n      data: null,\n      requestID: null,\n      userID: '',\n      messages: [],\n      currentlyInLobby: false,\n      roomID: ''\n    };\n  }\n\n  componentDidMount() {\n    this.ws.onopen = evt => {\n      console.log('connected to ws!');\n    };\n\n    this.ws.onmessage = evt => {\n      const message = JSON.parse(evt.data); // const message = evt.data;\n\n      if ('clientID' in message) {\n        if (this.props.location.search) {\n          let query = queryString.parse(this.props.location.search);\n\n          if (query.game !== undefined) {\n            this.setState(_objectSpread({}, this.state, {\n              roomID: query.game,\n              userID: message.clientID\n            }), () => this.joinLobby());\n          }\n        } else {\n          this.setState(_objectSpread({}, this.state, {\n            userID: message.clientID\n          }));\n        }\n      }\n\n      if ('author' in message) {\n        const messages = [...this.state.messages, message];\n        this.setState(_objectSpread({}, this.state, {\n          messages\n        }));\n      }\n    };\n\n    this.ws.onclose = () => {\n      console.log('disconnected');\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      id: \"appTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Chat App\"), !this.state.currentlyInLobby ? React.createElement(HomeContainer, {\n      joinLobby: this.joinLobby,\n      createLobby: this.createLobby,\n      roomID: this.state.roomID,\n      handleRoomJoinText: this.handleRoomJoinText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }) : React.createElement(Chatbox, {\n      ws: this.ws,\n      messages: this.state.messages,\n      handleChange: this.handleChange,\n      handleSubmit: this.handleSubmit,\n      leaveRoom: this.leaveRoom,\n      outgoingMessage: this.state.outgoingMessage,\n      roomID: this.state.roomID,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/matth/Code/ChatApp/client/src/App.js"],"names":["React","Component","queryString","Chatbox","HomeContainer","App","constructor","props","ws","WebSocket","componentDidUpdate","console","log","state","messages","getUserID","response","fetch","body","json","status","Error","message","userID","getWebsocketURL","createRoom","handleChange","event","setState","outgoingMessage","target","value","handleSubmit","author","roomID","messageString","JSON","stringify","send","checkIfLobbyIsActive","createLobby","enterLobby","joinLobby","roomJoinStatus","leaveRoom","currentlyInLobby","roomLeaveStatus","clearRoomInfo","changeLobbyState","handleRoomJoinText","data","requestID","componentDidMount","onopen","evt","onmessage","parse","location","search","query","game","undefined","clientID","onclose","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport queryString from 'query-string';\r\nimport './Styles/App.css';\r\nimport Chatbox from './Components/Chatbox';\r\nimport HomeContainer from './Components/HomeContainer';\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      data: null,\r\n      requestID: null,\r\n      userID: '',\r\n      messages: [],\r\n      currentlyInLobby: false,\r\n      roomID: '',\r\n    };\r\n  }\r\n\r\n  ws = new WebSocket('ws://localhost:5000')\r\n\r\n  componentDidMount() {\r\n\r\n    this.ws.onopen = evt =>{\r\n      console.log('connected to ws!');\r\n    }\r\n\r\n    this.ws.onmessage = evt =>{\r\n      const message = JSON.parse(evt.data);\r\n      // const message = evt.data;\r\n\r\n\r\n      if('clientID' in message){\r\n\r\n        if(this.props.location.search){\r\n          let query = queryString.parse(this.props.location.search);\r\n          if (query.game !== undefined){\r\n            this.setState({\r\n              ...this.state,\r\n              roomID: query.game,\r\n              userID: message.clientID,\r\n            }, () => this.joinLobby())\r\n          }\r\n        }\r\n        else {\r\n          this.setState({\r\n            ...this.state,\r\n            userID: message.clientID,\r\n          })\r\n        }\r\n      }\r\n\r\n      if('author' in message){\r\n        const messages = [...this.state.messages, message];\r\n        this.setState({...this.state, messages})\r\n      }\r\n    }\r\n\r\n    this.ws.onclose = () =>{\r\n      console.log('disconnected');\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  componentDidUpdate = () => {\r\n    console.log(this.state.messages);\r\n  }\r\n\r\n\r\n\r\n  //Returns a unique id to identify this user.\r\n  getUserID = async () => {\r\n    const response = await fetch('/create_user_id');\r\n    const body = await response.json();\r\n\r\n    if(response.status !== 200){\r\n      throw Error(body.message)\r\n    }\r\n    console.log(body.userID);\r\n    return body.userID;\r\n  };\r\n\r\n  //returns url to request a WS connection.\r\n  getWebsocketURL = async () => {\r\n    const response = await fetch('/get_websocket_url');\r\n    const body = await response.json();\r\n\r\n    if(response.status !== 200){\r\n      throw Error(body.message)\r\n    }\r\n\r\n    return body;\r\n  }\r\n\r\n  //returns a room id and tells the server to group this user into a party.\r\n  createRoom = async () => {\r\n    const response = await fetch('/create_room');\r\n    const body = await response.json();\r\n\r\n    if(response.status !== 200){\r\n      throw Error(body.message)\r\n    }\r\n\r\n    return body;\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({...this.state, outgoingMessage: event.target.value});\r\n  }\r\n\r\n  handleSubmit = () => {\r\n    let message = {\r\n      author: this.state.userID,\r\n      roomID: this.state.roomID,\r\n      message: this.state.outgoingMessage\r\n    }\r\n\r\n    this.setState(state => {\r\n      const messages = [...state.messages, message];\r\n      return{...state, messages}\r\n    })\r\n\r\n    let messageString = JSON.stringify(message);\r\n    this.ws.send(messageString);\r\n\r\n  }\r\n\r\n  checkIfLobbyIsActive = async (roomID) => {\r\n    const response = await fetch(`/is_room_active?roomID=${roomID}`);\r\n    const body = await response.json();\r\n\r\n    if(response.status !== 200){\r\n      throw Error(body.message)\r\n    }\r\n\r\n    return body;\r\n  }\r\n\r\n  createLobby = async () => {\r\n    console.log(this.state.userID);\r\n    const response = await fetch(`/create_room?userID=${this.state.userID}`);\r\n    const body = await response.json();\r\n\r\n    if(response.status !== 200){\r\n      throw Error(body.message)\r\n    }\r\n\r\n    this.setState({...this.state, roomID: body.roomID});\r\n    this.enterLobby();\r\n\r\n    return body;\r\n  }\r\n\r\n  joinLobby = async () => {\r\n    if(this.checkIfLobbyIsActive(this.state.roomID)){\r\n      const response = await fetch(`/join_room?userID=${this.state.userID}&roomID=${this.state.roomID}`);\r\n      const body = await response.json();\r\n\r\n      if(response.status !== 200){\r\n        throw Error(body.message)\r\n      }\r\n      console.log(body.roomJoinStatus);\r\n      if(body.roomJoinStatus === \"Success\"){\r\n        this.enterLobby();\r\n      }\r\n\r\n      return body;\r\n\r\n    }\r\n\r\n  }\r\n\r\n  leaveRoom = async () => {\r\n    if (!this.state.currentlyInLobby) return;\r\n    const response = await fetch(`/leave_room?userID=${this.state.userID}&roomID=${this.state.roomID}`);\r\n    const body = await response.json();\r\n\r\n    if(response.status !== 200){\r\n      throw Error(body.message)\r\n    }\r\n    console.log(body.roomJoinStatus);\r\n    if(body.roomLeaveStatus === \"Success\"){\r\n      this.clearRoomInfo();\r\n    }\r\n\r\n    if(body.roomJoinStatus === \"Failed\"){\r\n      console.log (body.roomJoinStatus);\r\n    }\r\n    return body;\r\n\r\n\r\n  }\r\n\r\n  clearRoomInfo = () => {\r\n    this.setState({...this.state, currentlyInLobby: false, roomID: '', messages: []});\r\n  }\r\n\r\n  changeLobbyState = () =>{\r\n    this.setState({...this.state, currentlyInLobby: !this.state.currentlyInLobby})\r\n  }\r\n\r\n  enterLobby = () =>{\r\n    this.setState({...this.state, currentlyInLobby: true})\r\n  }\r\n\r\n  handleRoomJoinText = (event) =>{\r\n    this.setState({...this.state, roomID: event.target.value});\r\n  }\r\n\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1 id=\"appTitle\">Chat App</h1>\r\n          {(!this.state.currentlyInLobby)\r\n            ? <HomeContainer\r\n                joinLobby={this.joinLobby}\r\n                createLobby={this.createLobby}\r\n                roomID={this.state.roomID}\r\n                handleRoomJoinText={this.handleRoomJoinText}/>\r\n            : <Chatbox\r\n                ws={this.ws}\r\n                messages={this.state.messages}\r\n                handleChange={this.handleChange}\r\n                handleSubmit={this.handleSubmit}\r\n                leaveRoom={this.leaveRoom}\r\n                outgoingMessage={this.state.outgoingMessage}\r\n                roomID={this.state.roomID}/>\r\n          }\r\n\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}
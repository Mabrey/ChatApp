{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\matth\\\\Code\\\\ChatApp\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport queryString from 'query-string';\nimport './App.css';\nimport Chatbox from './Components/Chatbox';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: null,\n      requestID: null,\n      user: null,\n      dataFromServer: null\n    };\n    this.ws = new WebSocket('ws://localhost:5000');\n\n    this.apiRes = async () => {\n      const response = await fetch('/express_backend');\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n\n    this.getUserID = async () => {\n      const response = await fetch('/get_user_number');\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        outgoingMessage: event.target.value\n      });\n    };\n\n    this.handleSubmit = () => {\n      this.ws.send(this.state.outgoingMessage);\n    };\n  }\n\n  componentDidMount() {\n    // Call our fetch function below once the component mounts\n    this.apiRes().then(res => this.setState({\n      data: res.express\n    })).catch(err => console.log(err)); // this.getUserID()\n    //   .then(res=> this.setState({user: res.express}))\n    //   .catch(err=> console.log(err));\n\n    this.ws.onopen = () => {\n      console.log('connected to ws!');\n    };\n\n    this.ws.onmessage = evt => {\n      const message = evt.data;\n      this.setState({\n        dataFromServer: message\n      });\n      console.log(message);\n    };\n\n    this.ws.onclose = () => {\n      console.log('disconnected');\n    };\n\n    const lobby = queryString.parse(this.props.location.search);\n    console.log(lobby.game);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, this.state.data), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, this.state.user), React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.handleChange,\n      value: this.state.outgoingMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, this.state.dataFromServer), React.createElement(Chatbox, {\n      ws: this.ws,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/matth/Code/ChatApp/client/src/App.js"],"names":["React","Component","queryString","Chatbox","App","state","data","requestID","user","dataFromServer","ws","WebSocket","apiRes","response","fetch","body","json","status","Error","message","getUserID","handleChange","event","setState","outgoingMessage","target","value","handleSubmit","send","componentDidMount","then","res","express","catch","err","console","log","onopen","onmessage","evt","onclose","lobby","parse","props","location","search","game","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport queryString from 'query-string';\r\nimport './App.css';\r\nimport Chatbox from './Components/Chatbox';\r\n\r\nclass App extends Component {\r\n  state = {\r\n      data: null,\r\n      requestID: null,\r\n      user: null,\r\n      dataFromServer: null,\r\n  };\r\n\r\n  ws = new WebSocket('ws://localhost:5000')\r\n  \r\n  componentDidMount() {\r\n      // Call our fetch function below once the component mounts\r\n    this.apiRes()\r\n      .then(res => this.setState({ data: res.express }))\r\n      .catch(err => console.log(err));\r\n\r\n    // this.getUserID()\r\n    //   .then(res=> this.setState({user: res.express}))\r\n    //   .catch(err=> console.log(err));\r\n\r\n    this.ws.onopen = () =>{\r\n      console.log('connected to ws!');\r\n    }\r\n\r\n    this.ws.onmessage = evt =>{\r\n      const message = evt.data;\r\n      this.setState({dataFromServer: message})\r\n      console.log(message)\r\n    }\r\n\r\n    this.ws.onclose = () =>{\r\n      console.log('disconnected');\r\n    }\r\n\r\n    const lobby = queryString.parse(this.props.location.search);\r\n    console.log(lobby.game);\r\n  }\r\n\r\n  apiRes = async () => {\r\n    const response = await fetch('/express_backend');\r\n\r\n    const body = await response.json();\r\n\r\n    if(response.status !== 200){\r\n      throw Error(body.message)\r\n    }\r\n    return body;\r\n  };\r\n\r\n  getUserID = async () => {\r\n    const response = await fetch('/get_user_number');\r\n    const body = await response.json();\r\n\r\n    if(response.status !== 200){\r\n      throw Error(body.message)\r\n    }\r\n\r\n    return body;\r\n  };\r\n\r\n  // apiRes2 = async () => {\r\n  //   const response = await fetch('/');\r\n\r\n  //   const body = await response.json();\r\n\r\n  //   if(response.status !== 200){\r\n  //     throw Error(body.message)\r\n  //   }\r\n  //   return body;\r\n  // }\r\n\r\n\r\n  handleChange = (event) => {\r\n    this.setState({outgoingMessage: event.target.value});\r\n  }\r\n\r\n  handleSubmit = () => {\r\n    this.ws.send(this.state.outgoingMessage);\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <p>{this.state.data}</p>\r\n          <p>{this.state.user}</p>\r\n          <input type='text' onChange={this.handleChange} value ={this.state.outgoingMessage} />\r\n          <button onClick={this.handleSubmit}>Submit</button>\r\n          <p>{this.state.dataFromServer}</p>\r\n          \r\n          <Chatbox ws={this.ws}/>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\matth\\\\Code\\\\ChatApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\matth\\\\Code\\\\ChatApp\\\\client\\\\src\\\\App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport queryString from 'query-string';\nimport './App.css';\nimport Chatbox from './Components/Chatbox';\nimport HomeContainer from './Components/HomeContainer';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.ws = new WebSocket('ws://localhost:5000');\n\n    this.componentDidUpdate = () => {\n      console.log(this.state.messages);\n    };\n\n    this.getUserID = async () => {\n      const response = await fetch('/create_user_id');\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      console.log(body.userID);\n      return body.userID;\n    };\n\n    this.getWebsocketURL = async () => {\n      const response = await fetch('/get_websocket_url');\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n\n    this.createRoom = async () => {\n      const response = await fetch('/create_room');\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        outgoingMessage: event.target.value\n      });\n    };\n\n    this.handleSubmit = () => {\n      this.ws.send(this.state.outgoingMessage);\n      this.setState(state => {\n        const messages = [...state.messages, this.state.outgoingMessage];\n        return _objectSpread({}, state, {\n          messages\n        });\n      });\n    };\n\n    this.createLobby = async () => {\n      console.log(this.state.userID);\n      const response = await fetch(\"/create_room?userID=\".concat(this.state.userID));\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      this.setState(_objectSpread({}, this.state, {\n        roomID: body.roomID\n      }));\n      this.changeLobbyState(); //render the chatbox and connect to websocket\n\n      return body;\n    };\n\n    this.joinLobby = async lobbyID => {\n      if (this.checkIfLobbyIsActive(lobbyID)) {\n        const response = await fetch(\"/join_room?userID=\".concat(this.state.userID, \"&lobbyID=\").concat(lobbyID));\n        const body = await response.json();\n\n        if (response.status !== 200) {\n          throw Error(body.message);\n        }\n\n        this.setState(_objectSpread({}, this.state, {\n          gameID: body.gameID\n        })); //render the chatbox and connect to websocket\n\n        return body;\n      }\n    };\n\n    this.changeLobbyState = () => {\n      this.setState(_objectSpread({}, this.state, {\n        currentlyInLobby: !this.state.currentlyInLobby\n      }));\n    };\n\n    this.state = {\n      data: null,\n      requestID: null,\n      userID: null,\n      messages: [],\n      currentlyInLobby: this.props.location.search ? true : false,\n      lobby: this.props.location.search ? queryString.parse(this.props.location.search).game : ''\n    };\n  }\n\n  componentDidMount() {\n    // Call our fetch function below once the component mounts\n    // this.apiRes()\n    //   .then(res => this.setState({ data: res.express }))\n    //   .catch(err => console.log(err));\n    // this.getUserID()\n    //   .then(res=> this.setState({user: res.express}))\n    //   .catch(err=> console.log(err));\n    this.ws.onopen = evt => {\n      console.log('connected to ws!');\n    };\n\n    this.ws.onmessage = evt => {\n      const message = JSON.parse(evt.data); // const message = evt.data;\n\n      if ('clientID' in message) {\n        console.log(message.clientID);\n        this.setState(_objectSpread({}, this.state, {\n          userID: message.clientID\n        }));\n      } else {\n        this.setState(state => {\n          const messages = [...state.messages, message];\n          return _objectSpread({}, state, {\n            messages\n          });\n        });\n      }\n    };\n\n    this.ws.onclose = () => {\n      console.log('disconnected');\n    }; // this.setState(() => ({...this.state, lobby: 'eh'}));\n\n\n    console.log(this.state.lobby);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      id: \"appTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Chat App\"), !this.state.currentlyInLobby ? React.createElement(HomeContainer, {\n      enterLobby: this.changeLobbyState,\n      createLobby: this.createLobby,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }) : React.createElement(Chatbox, {\n      ws: this.ws,\n      messages: this.state.messages,\n      handleChange: this.handleChange,\n      handleSubmit: this.handleSubmit,\n      outgoingMessage: this.state.outgoingMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/matth/Code/ChatApp/client/src/App.js"],"names":["React","Component","queryString","Chatbox","HomeContainer","App","constructor","props","ws","WebSocket","componentDidUpdate","console","log","state","messages","getUserID","response","fetch","body","json","status","Error","message","userID","getWebsocketURL","createRoom","handleChange","event","setState","outgoingMessage","target","value","handleSubmit","send","createLobby","roomID","changeLobbyState","joinLobby","lobbyID","checkIfLobbyIsActive","gameID","currentlyInLobby","data","requestID","location","search","lobby","parse","game","componentDidMount","onopen","evt","onmessage","JSON","clientID","onclose","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport queryString from 'query-string';\r\nimport './App.css';\r\nimport Chatbox from './Components/Chatbox';\r\nimport HomeContainer from './Components/HomeContainer';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      data: null,\r\n      requestID: null,\r\n      userID: null,\r\n      messages: [],\r\n      currentlyInLobby: (this.props.location.search\r\n        ? true\r\n        : false),\r\n      lobby: (this.props.location.search\r\n        ? queryString.parse(this.props.location.search).game\r\n        : ''),\r\n    };\r\n  }\r\n\r\n  ws = new WebSocket('ws://localhost:5000')\r\n\r\n  componentDidMount() {\r\n      // Call our fetch function below once the component mounts\r\n    // this.apiRes()\r\n    //   .then(res => this.setState({ data: res.express }))\r\n    //   .catch(err => console.log(err));\r\n\r\n    // this.getUserID()\r\n    //   .then(res=> this.setState({user: res.express}))\r\n    //   .catch(err=> console.log(err));\r\n\r\n    this.ws.onopen = evt =>{\r\n      console.log('connected to ws!');\r\n    }\r\n\r\n    this.ws.onmessage = evt =>{\r\n      const message = JSON.parse(evt.data);\r\n      // const message = evt.data;\r\n\r\n\r\n      if('clientID' in message){\r\n        console.log(message.clientID);\r\n        this.setState({...this.state, userID: message.clientID})\r\n      }\r\n      else{\r\n        this.setState(state => {\r\n        const messages = [...state.messages, message];\r\n        return{...state, messages}\r\n        })\r\n      }\r\n    }\r\n\r\n    this.ws.onclose = () =>{\r\n      console.log('disconnected');\r\n    }\r\n\r\n    // this.setState(() => ({...this.state, lobby: 'eh'}));\r\n    console.log(this.state.lobby);\r\n  }\r\n\r\n  componentDidUpdate = () => {\r\n    console.log(this.state.messages);\r\n  }\r\n\r\n  //Returns a unique id to identify this user.\r\n  getUserID = async () => {\r\n    const response = await fetch('/create_user_id');\r\n    const body = await response.json();\r\n\r\n    if(response.status !== 200){\r\n      throw Error(body.message)\r\n    }\r\n    console.log(body.userID);\r\n    return body.userID;\r\n  };\r\n\r\n  //returns url to request a WS connection.\r\n  getWebsocketURL = async () => {\r\n    const response = await fetch('/get_websocket_url');\r\n    const body = await response.json();\r\n\r\n    if(response.status !== 200){\r\n      throw Error(body.message)\r\n    }\r\n\r\n    return body;\r\n  }\r\n\r\n  //returns a room id and tells the server to group this user into a party.\r\n  createRoom = async () => {\r\n    const response = await fetch('/create_room');\r\n    const body = await response.json();\r\n\r\n    if(response.status !== 200){\r\n      throw Error(body.message)\r\n    }\r\n\r\n    return body;\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({outgoingMessage: event.target.value});\r\n  }\r\n\r\n  handleSubmit = () => {\r\n    this.ws.send(this.state.outgoingMessage);\r\n    this.setState(state => {\r\n      const messages = [...state.messages, this.state.outgoingMessage];\r\n      return{...state, messages}\r\n    })\r\n  }\r\n\r\n  createLobby = async () => {\r\n    console.log(this.state.userID);\r\n    const response = await fetch(`/create_room?userID=${this.state.userID}`);\r\n    const body = await response.json();\r\n\r\n    if(response.status !== 200){\r\n      throw Error(body.message)\r\n    }\r\n\r\n    this.setState({...this.state, roomID: body.roomID});\r\n    this.changeLobbyState();\r\n\r\n    //render the chatbox and connect to websocket\r\n\r\n    return body;\r\n  }\r\n\r\n  joinLobby = async (lobbyID) => {\r\n    if(this.checkIfLobbyIsActive(lobbyID)){\r\n      const response = await fetch(`/join_room?userID=${this.state.userID}&lobbyID=${lobbyID}`);\r\n      const body = await response.json();\r\n\r\n      if(response.status !== 200){\r\n        throw Error(body.message)\r\n      }\r\n\r\n      this.setState({...this.state, gameID: body.gameID});\r\n      //render the chatbox and connect to websocket\r\n\r\n      return body;\r\n\r\n    }\r\n\r\n  }\r\n\r\n  changeLobbyState = () =>{\r\n    this.setState({...this.state, currentlyInLobby: !this.state.currentlyInLobby})\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1 id=\"appTitle\">Chat App</h1>\r\n          {(!this.state.currentlyInLobby)\r\n            ? <HomeContainer enterLobby={this.changeLobbyState} createLobby={this.createLobby}/>\r\n            : <Chatbox\r\n                ws={this.ws}\r\n                messages={this.state.messages}\r\n                handleChange={this.handleChange}\r\n                handleSubmit={this.handleSubmit}\r\n                outgoingMessage={this.state.outgoingMessage}/>\r\n          }\r\n\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}
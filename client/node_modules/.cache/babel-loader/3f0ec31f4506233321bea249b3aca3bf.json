{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\matth\\\\Code\\\\ChatApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\matth\\\\Code\\\\ChatApp\\\\client\\\\src\\\\App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport queryString from 'query-string';\nimport './App.css';\nimport Chatbox from './Components/Chatbox';\nimport HomeContainer from './Components/HomeContainer';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.ws = new WebSocket('ws://localhost:5000');\n\n    this.componentDidUpdate = () => {\n      console.log(this.state.messages);\n    };\n\n    this.getUserID = async () => {\n      const response = await fetch('/create_user_id');\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      console.log(body.userID);\n      return body.userID;\n    };\n\n    this.getWebsocketURL = async () => {\n      const response = await fetch('/get_websocket_url');\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n\n    this.createRoom = async () => {\n      const response = await fetch('/create_room');\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        outgoingMessage: event.target.value\n      });\n    };\n\n    this.handleSubmit = () => {\n      this.ws.send(this.state.outgoingMessage);\n      this.setState(state => {\n        const messages = [...state.messages, this.state.outgoingMessage];\n        return _objectSpread({}, state, {\n          messages\n        });\n      });\n    };\n\n    this.createLobby = async () => {\n      const response = await fetch(\"/create_room?userID=\".concat(this.state.userID));\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      this.setState(_objectSpread({}, this.state, {\n        gameID: body.gameID\n      })); //render the chatbox and connect to websocket\n\n      return body;\n    };\n\n    this.joinLobby = () => {//create text box to input lobby info\n    };\n\n    this.changeLobbyState = () => {\n      this.setState(_objectSpread({}, this.state, {\n        currentlyInLobby: !this.state.currentlyInLobby\n      }));\n    };\n\n    this.state = {\n      data: null,\n      requestID: null,\n      userID: null,\n      messages: [],\n      currentlyInLobby: this.props.location.search ? true : false,\n      lobby: this.props.location.search ? queryString.parse(this.props.location.search).game : ''\n    };\n  }\n\n  componentDidMount() {\n    // Call our fetch function below once the component mounts\n    // this.apiRes()\n    //   .then(res => this.setState({ data: res.express }))\n    //   .catch(err => console.log(err));\n    // this.getUserID()\n    //   .then(res=> this.setState({user: res.express}))\n    //   .catch(err=> console.log(err));\n    let userID;\n    this.getUserID().then(res => console.log(res));\n    console.log(userID);\n    this.setState(_objectSpread({}, this.state, {\n      userID: this.getUserID().then(res => {\n        return res.userID;\n      })\n    }));\n    console.log(userID);\n\n    this.ws.onopen = () => {\n      console.log('connected to ws!');\n    };\n\n    this.ws.onmessage = evt => {\n      const message = evt.data;\n      this.setState(state => {\n        const messages = [...state.messages, message];\n        return _objectSpread({}, state, {\n          messages\n        });\n      });\n      console.log(message);\n    };\n\n    this.ws.onclose = () => {\n      console.log('disconnected');\n    }; // this.setState(() => ({...this.state, lobby: 'eh'}));\n\n\n    console.log(this.state.lobby);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, !this.state.currentlyInLobby ? React.createElement(HomeContainer, {\n      enterLobby: this.changeLobbyState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }) : React.createElement(Chatbox, {\n      ws: this.ws,\n      messages: this.state.messages,\n      handleChange: this.handleChange,\n      handleSubmit: this.handleSubmit,\n      outgoingMessage: this.state.outgoingMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/matth/Code/ChatApp/client/src/App.js"],"names":["React","Component","queryString","Chatbox","HomeContainer","App","constructor","props","ws","WebSocket","componentDidUpdate","console","log","state","messages","getUserID","response","fetch","body","json","status","Error","message","userID","getWebsocketURL","createRoom","handleChange","event","setState","outgoingMessage","target","value","handleSubmit","send","createLobby","gameID","joinLobby","changeLobbyState","currentlyInLobby","data","requestID","location","search","lobby","parse","game","componentDidMount","then","res","onopen","onmessage","evt","onclose","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport queryString from 'query-string';\r\nimport './App.css';\r\nimport Chatbox from './Components/Chatbox';\r\nimport HomeContainer from './Components/HomeContainer';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      data: null,\r\n      requestID: null,\r\n      userID: null,\r\n      messages: [],\r\n      currentlyInLobby: (this.props.location.search\r\n        ? true\r\n        : false),\r\n      lobby: (this.props.location.search\r\n        ? queryString.parse(this.props.location.search).game\r\n        : ''),\r\n    };\r\n  }\r\n\r\n  ws = new WebSocket('ws://localhost:5000')\r\n\r\n  componentDidMount() {\r\n      // Call our fetch function below once the component mounts\r\n    // this.apiRes()\r\n    //   .then(res => this.setState({ data: res.express }))\r\n    //   .catch(err => console.log(err));\r\n\r\n    // this.getUserID()\r\n    //   .then(res=> this.setState({user: res.express}))\r\n    //   .catch(err=> console.log(err));\r\n\r\n    let userID;\r\n    this.getUserID().then(res => console.log(res));\r\n    console.log(userID);\r\n\r\n    this.setState({...this.state, userID: this.getUserID().then(res => { return res.userID})})\r\n    console.log(userID);\r\n\r\n    this.ws.onopen = () =>{\r\n      console.log('connected to ws!');\r\n    }\r\n\r\n    this.ws.onmessage = evt =>{\r\n      const message = evt.data;\r\n      this.setState(state => {\r\n        const messages = [...state.messages, message];\r\n        return{...state, messages}\r\n      })\r\n      console.log(message)\r\n    }\r\n\r\n    this.ws.onclose = () =>{\r\n      console.log('disconnected');\r\n    }\r\n\r\n    // this.setState(() => ({...this.state, lobby: 'eh'}));\r\n    console.log(this.state.lobby);\r\n  }\r\n\r\n  componentDidUpdate = () => {\r\n    console.log(this.state.messages);\r\n  }\r\n\r\n  //Returns a unique id to identify this user.\r\n  getUserID = async () => {\r\n    const response = await fetch('/create_user_id');\r\n    const body = await response.json();\r\n\r\n    if(response.status !== 200){\r\n      throw Error(body.message)\r\n    }\r\n    console.log(body.userID);\r\n    return body.userID;\r\n  };\r\n\r\n  //returns url to request a WS connection.\r\n  getWebsocketURL = async () => {\r\n    const response = await fetch('/get_websocket_url');\r\n    const body = await response.json();\r\n\r\n    if(response.status !== 200){\r\n      throw Error(body.message)\r\n    }\r\n\r\n    return body;\r\n  }\r\n\r\n  //returns a room id and tells the server to group this user into a party.\r\n  createRoom = async () => {\r\n    const response = await fetch('/create_room');\r\n    const body = await response.json();\r\n\r\n    if(response.status !== 200){\r\n      throw Error(body.message)\r\n    }\r\n\r\n    return body;\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({outgoingMessage: event.target.value});\r\n  }\r\n\r\n  handleSubmit = () => {\r\n    this.ws.send(this.state.outgoingMessage);\r\n    this.setState(state => {\r\n      const messages = [...state.messages, this.state.outgoingMessage];\r\n      return{...state, messages}\r\n    })\r\n  }\r\n\r\n  createLobby = async () => {\r\n    const response = await fetch(`/create_room?userID=${this.state.userID}`);\r\n    const body = await response.json();\r\n\r\n    if(response.status !== 200){\r\n      throw Error(body.message)\r\n    }\r\n\r\n    this.setState({...this.state, gameID: body.gameID});\r\n    //render the chatbox and connect to websocket\r\n\r\n    return body;\r\n  }\r\n\r\n  joinLobby = () => {\r\n    //create text box to input lobby info\r\n  }\r\n\r\n  changeLobbyState = () =>{\r\n    this.setState({...this.state, currentlyInLobby: !this.state.currentlyInLobby})\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          {(!this.state.currentlyInLobby)\r\n            ? <HomeContainer enterLobby={this.changeLobbyState}/>\r\n            : <Chatbox\r\n                ws={this.ws}\r\n                messages={this.state.messages}\r\n                handleChange={this.handleChange}\r\n                handleSubmit={this.handleSubmit}\r\n                outgoingMessage={this.state.outgoingMessage}/>\r\n          }\r\n\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}